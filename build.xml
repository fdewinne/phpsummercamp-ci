<?xml version="1.0"  encoding="UTF-8" ?>
<project name="CIBlog" basedir="." default="build">


    <target name="clean" description="clean env">
        <delete>
            <fileset dir="${project.basedir}/logs">
                <include name="*.log" />
            </fileset>
        </delete>

        <delete dir="${project.basedir}/build/log" failonerror="false" />
        <delete dir="${project.basedir}/build/api" failonerror="false" />
    </target>

    <target name="prepare" description="prepare env for new build">

        <mkdir dir="${project.basedir}/build/log" mode='0775'/>
        <mkdir dir="${project.basedir}/build/api" mode='0775'/>
    </target>

    <target name="test" description="all app test">
        <exec executable="${project.basedir}/bin/phpunit" passthru="true">
          <arg value="--configuration=test/" />
        </exec>
    </target>

    <target name="test-ci" description="all app test">
        <exec executable="${project.basedir}/bin/phpunit" passthru="true">
          <arg value="--configuration=test/" />
          <arg value="--log-junit=build/log/junit.xml" />
          <arg value="--coverage-html=build/log/coverage" />
          <arg value="--coverage-clover=build/log/coverage.xml" />
        </exec>
    </target>

    <target name="metrics">
        <phpmd>
            <fileset dir="${project.basedir}/src">
                <include name="*.php" />
             </fileset>
            <formatter type="xml" outfile="${project.basedir}/build/log/pmd.xml"/>
        </phpmd>
    </target>

    <target name="install-libraries">
        <exec executable="composer" passthru="true">
              <arg value="install" />
        </exec>
    </target>

    <property file="build.properties" />
    <target name="integrate-database" >
        <pdosqlexec url="mysql:host=${db.host}"
                    userid="${db.username}"
                    password="${db.password}">

            <transaction src="${project.basedir}/data/base_structure.sql"/>
            <formatter type="plain" usefile="false" />
        </pdosqlexec>

        <exec executable="${project.basedir}/bin/phinx" passthru="true">
              <arg value="migrate" />
              <arg value="--configuration=data/phinx.yml" />
        </exec>
    </target>

    <target name="docs">
        <phpdoc2 title="API Documentation"
                 destdir="${project.basedir}/build/api"
                 template="clean">

           <fileset dir="${project.basedir}/src">
              <include name="*.php" />
           </fileset>
        </phpdoc2>
    </target>

    <target name="deploy">
        <chmod file="${project.basedir}/config/deploy_key" mode="0600" />

        <filesync
            sourcedir="${project.basedir}/"
            destinationdir="vagrant@192.168.33.10:/var/www/staging"
            dryrun="false"
            itemizechanges="true"
            verbose="true"
            checksum="true"
            identityFile="${project.basedir}/config/deploy_key"
            excludeFile="${project.basedir}/config/deploy_exclude"
        />

        <ssh
            username="vagrant"
            pubkeyfile="${project.basedir}/config/deploy_key.pub"
            privkeyfile="${project.basedir}/config/deploy_key"
            host="192.168.33.10"
            command="cd /var/www/staging &amp;&amp; composer install -v -o --no-dev"
        />

        <exec executable="${project.basedir}/bin/phinx" passthru="true">
              <arg value="migrate" />
              <arg value="--environment=staging" />
              <arg value="--configuration=data/phinx.yml" />
        </exec>
    </target>

    <target name="build-private" description="private build">
        <phingcall target="clean" />
        <phingcall target="prepare" />
        <phingcall target="install-libraries" />
        <phingcall target="integrate-database" />
        <phingcall target="test" />
    </target>

    <target name="build" description="main build">
        <phingcall target="clean" />
        <phingcall target="prepare" />
        <phingcall target="install-libraries" />
        <phingcall target="integrate-database" />
        <phingcall target="test-ci" />
        <phingcall target="metrics" />
        <phingcall target="docs" />
        <phingcall target="deploy" />
    </target>


    <import file="./vendor/continuousphp/aws-sdk-phing/tasks.xml" />
    <property name="aws.profile" value="" />

    <target name="setup-aws">
        <aws-config region="${aws.region}" profile="${aws.profile}" />
    </target>

    <target name="run-stack">
        <if>
            <equals arg1="single-server" arg2="${cf.template}" />
            <then>
                <aws-cf-runstack
                        name="subsite-${cf.stackName}"
                        updateOnConflict="true"
                        capabilities="CAPABILITY_IAM"
                        templatePath="./resources/cloudformation/${cf.template}.template">
                    <param name="KeyName" value="${cf.KeyName}" />
                    <param name="env" value="${cf.stackName}" />
                </aws-cf-runstack>
            </then>
            <else>
                <aws-cf-runstack
                        name="subsite-${cf.stackName}"
                        updateOnConflict="true"
                        capabilities="CAPABILITY_IAM"
                        templatePath="./resources/cloudformation/${cf.template}.template">
                    <param name="KeyName" value="${cf.KeyName}" />
                    <param name="DBName" value="${cf.DBName}" />
                    <param name="DBUser" value="${cf.DBUser}" />
                    <param name="DBPassword" value="${cf.DBPassword}" />
                    <param name="env" value="${cf.stackName}" />
                    <output name="AutoscalingGroup" property="deploy.autoScalingGroup" />
                </aws-cf-runstack>
            </else>
        </if>
    </target>

    <target name="setup-deployment-group">
        <if>
            <equals arg1="single-server" arg2="${cf.template}" />
            <then>
                <aws-deploy-deployment-group
                        name="${cf.stackName}"
                        updateOnConflict="true"
                        deploymentConfigName="CodeDeployDefault.OneAtATime"
                        serviceRole="${deploy.serviceRole}"
                        application="${deploy.applicationName}">
                    <ec2TagFilter key="env" value="${cf.stackName}" />
                </aws-deploy-deployment-group>
            </then>
            <else>
                <aws-deploy-deployment-group
                        name="${cf.stackName}"
                        updateOnConflict="true"
                        deploymentConfigName="CodeDeployDefault.OneAtATime"
                        serviceRole="${deploy.serviceRole}"
                        application="${deploy.applicationName}">
                    <autoScalingGroup name="${deploy.autoScalingGroup}" />
                </aws-deploy-deployment-group>
            </else>
        </if>
    </target>

    <target name="provision-stack"
            description="Provision a stack on AWS"
            depends="setup-aws, run-stack, setup-deployment-group" />

</project>